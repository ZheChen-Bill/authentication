clc
close all
clear 
%% fixed the random seed for validation
rng(2)
%% Authentication example
%generate random message, my polynomial hash function use 0 and 1 string as input
m=randi(2,1,100000)+47;
m=char(m);
%save the message for hardware test
fid = fopen('message.txt','w+');
for i = 1:(length(m)/8)
    fprintf(fid,'%s\r\n',m(8*i-7:8*i));
    % disp(m(8*i-7:8*i));
end
fclose(fid);
lm=length(m);
disp('message:')
disp(m)
%polynomial hash
k=randi(2,1,186)+47;
k=char(k);% k is the predistributed key
%save the message for hardware test
fid=fopen('polynomial_key.txt','w+');
for i = 1:(length(k)/31)
    fprintf(fid,'%s\r\n',k((31*i)-30:31*i));
    % disp(k((31*i)-30:31*i));
end
fclose(fid);
lk=length(k);
disp('k(predistributed):')
disp(k)
[tagp,prevvar]=polyhash(m(1:248),k);
for i = 2:(floor(length(m)/248))
    [tagp,prevvar]=polyhash(m(248*i-247:248*i),k,prevvar);
end
tmp='000000000000000000000000000000';
m_tmp = [tmp(1:mod(-length(m(99945:100000)),31)),(m(99945:100000))];
[tagp,prevvar]=polyhash(m_tmp,k,prevvar);
%considering that the size of the message can be very large, we may want to
%perform the polynomial hashing process in sections so that the old message
%can be deleted
% m2=randi(2,1,100000)+47;%second part of message
% m2=char(m2);
% lm2= length(m2);
% [tagp,prevvar]=polyhash(m2,k,prevvar);
% disp('polynomial hash output:')
% disp(tagp)

%toeplitz hash
seed=randi(2,1,192+40-1)+47;%seed is predistributed
seed=char(seed);
%save the message for hardware test
fid=fopen('toeplitz_key.txt','w+');
fprintf(fid,'%s\r\n',seed);
fclose(fid);
lseed = length(seed);
disp('toeplitz hash seed(predistributed):')
disp(seed)
tagt = toeplitzhash(tagp,seed);
disp('toeplitz hash output')
disp(tagt)

%one time pad (xor)
otpkey=randi(2,1,40)+47;
otpkey=char(otpkey);
%save the message for hardware test
fid=fopen('otp_key.txt','w+');
fprintf(fid,'%s\r\n',otpkey);
fclose(fid);
lotp = length(otpkey);
disp('otpkey(predistributed for 1st round of QKD, update with secret key generated by QKD after each round):')
disp(otpkey)
tag=xor(otpkey-48,tagt-48);
tag=char(tag+48);
disp('authentication tag:')
disp(tag)